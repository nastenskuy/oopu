namespace Inheritance
{
    class Program
    {
        static void Main(string[] args)
        {
          
            Circle circle = new Circle { Radius = 7 };
            Rectangle rectangle = new Rectangle { Width = 5, Height = 5 };
            Console.WriteLine($"Площа круга - {circle.CalculateArea()}, Отже, периметр = {circle.CalculatePerimeter()}");
            Console.WriteLine($"Площа квадрата - {rectangle.CalculateArea()}, Отже периметр = {rectangle.CalculatePerimeter()}");
           
            Apple apple = new Apple { Name = "банан", Variety = "Барро", Color = "схожий по кольору на лимон, такий трохи кислотно жовтий" };
            Pear pear = new Pear { Name = "виноград", Variety = "Кешью", Color = "салатовий" };
            Console.WriteLine($"фрукт -{apple.Name}, сорт фрукту: {apple.Variety}, колір: {apple.Color}");
            Console.WriteLine($"фрукт - {pear.Name}, сорт фрукту {pear.Variety}, колір: {pear.Color}");

            Cat cat = new Cat("сірий", 5.2f, 9.3f);
            Dog dog = new Dog("рижий", 10.7f, 13.5f);
            Console.WriteLine(cat);
            Console.WriteLine($"кіт: {cat.MakeSound()}");
            Console.WriteLine(dog);
            Console.WriteLine($"пес: {dog.MakeSound()}");
        }
    }
    public class Figure
    {
        public virtual double CalculateArea()
        {
            return 0;
        }
        public virtual double CalculatePerimeter()
        {
            return 0;
        }
    }
    public class Circle : Figure
    {
        public double Radius { get; set; }
        public override double CalculateArea()
        {
            return Math.PI * Math.Pow(Radius, 2);
        }
        public override double CalculatePerimeter()
        {
            return 2 * Math.PI * Radius;
        }
    }
    public class Rectangle : Figure
    {
        public double Width { get; set; }
        public double Height { get; set; }
        public override double CalculateArea()
        {
            return Width * Height;
        }
        public override double CalculatePerimeter()
        {
            return 2 * (Width + Height);
        }
    }
    public class Fruit
    {
        public string Name { get; set; }
    }
    public class Apple : Fruit
    {
        public string Variety { get; set; }
        public string Color { get; set; }
    }
    public class Pear : Fruit
    {
        public string Variety { get; set; }
        public string Color { get; set; }
    }
    public abstract class Animal
    {
        public float Weight { get; set; }
        public string Color { get; set; }
        public Animal(string color, float weight)
        {
            Color = color;
            Weight = weight;
        }
        public abstract string MakeSound();
    }
    public abstract class AnimalWithTail : Animal
    {
        public float TailLength { get; set; }
        public AnimalWithTail(string color, float weight, float tailLength) : base(color, weight)
        {
            TailLength = tailLength;
        }
    }
    public class Cat : AnimalWithTail
    {
        public Cat(string color, float weight, float tailLength) : base(color, weight, tailLength) { }
        private string Purr()
        {
            return "хррр";
        }
        private string Meow()
        {
            return "мяу";
        }
        public override string MakeSound()
        {
            return Purr() + Meow();
        }
        public override string ToString()
        {
            return $"Це кіт, колір = {Color}, Вага = {Weight}, хвіст = {TailLength}";
        }
    }
    public class Dog : AnimalWithTail
    {
        public Dog(string color, float weight, float tailLength) : base(color, weight, tailLength) { }
        public override string MakeSound()
        {
            return "гав";
        }
        public override string ToString()
        {
            return $"Це пес, колір = {Color}, вага = {Weight}, хвіст = {TailLength}";
        }
    }
}
